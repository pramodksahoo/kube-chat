# KubeChat Helm Chart - Rancher Desktop Development Configuration
# Optimized for local development on Rancher Desktop with minimal resources

# Global configuration for all services
global:
  # Local registry for Rancher Desktop
  imageRegistry: "localhost:5001"
  imageTag: "dev"
  imagePullSecrets: []
  
  # Development environment settings
  environment: "development"
  debug: true
  logLevel: "debug"
  
  # Namespace configuration
  namespace: "kubechat-dev"

# Deployment configuration
deployment:
  mode: "on-premises"
  airgap: false
  replicaCount: 1  # Single replica for development
  
# Resource configuration - Minimal for development
resources:
  minimal: true
  
  # API Gateway resources
  apiGateway:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  
  # Kubernetes Operator resources  
  operator:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  
  # Audit Service resources
  auditService:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  
  # Web Frontend resources
  web:
    limits:
      cpu: "100m"
      memory: "128Mi"
    requests:
      cpu: "50m"
      memory: "64Mi"

# API Gateway configuration
apiGateway:
  enabled: true
  image:
    repository: "kubechat/api-gateway"
    tag: "dev"
    pullPolicy: "Always"  # Always pull for development
  
  service:
    type: "ClusterIP"
    port: 8080
  
  # Development-specific configuration
  config:
    corsEnabled: true
    corsOrigins: ["http://localhost:3000", "http://localhost:5173"]
    rateLimitEnabled: false  # Disable for development
    metricsEnabled: true
    healthCheckEnabled: true

# Kubernetes Operator configuration
operator:
  enabled: true
  image:
    repository: "kubechat/operator"
    tag: "dev"
    pullPolicy: "Always"
  
  service:
    type: "ClusterIP"
    port: 8082
  
  # RBAC configuration
  rbac:
    create: true
    clusterWide: false  # Namespace-scoped for development
  
  # Webhook configuration
  webhook:
    enabled: false  # Disable webhooks for development simplicity
    
  # Metrics and monitoring  
  metrics:
    enabled: true
    port: 8082
  
  # Environment variables
  env:
    HEALTH_CHECK_PORT: 8082

# Audit Service configuration
auditService:
  enabled: true
  image:
    repository: "kubechat/audit-service"
    tag: "dev"
    pullPolicy: "Always"
  
  service:
    type: "ClusterIP"
    port: 8081
  
  # Development database configuration
  database:
    type: "postgresql"
    host: "postgres-postgresql"
    port: 5432
    name: "kubechat_audit_dev"
    username: "kubechat_user"
    # Password will be set via secret
  
  # Audit configuration
  config:
    retentionDays: 7  # Short retention for development
    batchSize: 100
    flushInterval: "10s"
  
  # Environment variables
  env:
    PORT: 8081

# NLP Service configuration
nlpService:
  enabled: true
  replicaCount: 1
  image:
    repository: "kubechat/nlp-service"
    tag: "dev"
    pullPolicy: "Always"
  
  service:
    type: "ClusterIP"
    port: 8084
  
  # Environment variables
  env:
    PORT: 8084
    LOG_LEVEL: "debug"
    NLP_PROVIDER: "ollama"
    OLLAMA_HOST: "http://{{ include \"kubechat.fullname\" . }}-ollama:11434"
    OLLAMA_MODEL: "llama3.2"
    OPENAI_MODEL: "gpt-3.5-turbo"
    MAX_TOKENS: "1000"
    TEMPERATURE: "0.7"
  
  # Resource configuration
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  
  # Health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL

# Web Frontend configuration
web:
  enabled: true
  image:
    repository: "kubechat/web"
    tag: "dev"
    pullPolicy: "Always"
  
  service:
    type: "ClusterIP"
    port: 8083
    targetPort: 8083
  
  # Development ingress
  ingress:
    enabled: true
    className: "traefik"  # Rancher Desktop default
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: "web"
    hosts:
      - host: "kubechat.local"
        paths:
          - path: "/"
            pathType: "Prefix"
    tls: []  # No TLS for development

# PostgreSQL configuration (using bitnami chart)
postgresql:
  enabled: false
  external:
    host: "postgres-postgresql"
    port: 5432
    database: "kubechat_audit"
    username: "postgres"
    password: "dev-password"
  global:
    postgresql:
      auth:
        postgresPassword: "dev-postgres-password"
        username: "kubechat_user"
        password: "dev-kubechat-password"
        database: "kubechat_audit_dev"
  
  # Development resource limits
  primary:
    resources:
      limits:
        cpu: "200m"
        memory: "256Mi"
      requests:
        cpu: "100m"
        memory: "128Mi"
    
    persistence:
      enabled: true
      size: "1Gi"  # Small volume for development
      
# Redis configuration (using built-in templates)
redis:
  enabled: true
  replicaCount: 1
  
  # Image configuration
  image:
    repository: "redis"
    tag: "7-alpine"
    pullPolicy: "IfNotPresent"
  
  # Service configuration
  service:
    type: "ClusterIP"
    port: 6379
  
  # Authentication
  auth:
    password: "dev-redis-password"
  
  # Development resource limits
  resources:
    limits:
      cpu: "100m"
      memory: "128Mi"
    requests:
      cpu: "50m"
      memory: "64Mi"
    
  # Persistence configuration
  persistence:
    enabled: false  # No persistence needed for development
    size: "1Gi"
    storageClass: ""
    accessModes:
      - "ReadWriteOnce"
  
  # Security context
  securityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    runAsNonRoot: true

# Security configuration - Relaxed for development
security:
  podSecurityPolicy:
    enabled: false
  
  networkPolicy:
    enabled: false
  
  rbac:
    create: true

# Development-specific features
development:
  # Enable debug endpoints
  debugEndpoints: true
  
  # Enable hot reload (if supported)
  hotReload: true
  
  # Enable development tools
  profiling: true
  
  # Mock external services
  mockServices:
    enabled: true
    
# Monitoring and observability
monitoring:
  # Enable basic monitoring for development
  prometheus:
    enabled: true
    scrapeInterval: "30s"
  
  # Disable complex monitoring for development
  jaeger:
    enabled: false
  
  grafana:
    enabled: false

# Backup configuration - Disabled for development
backup:
  enabled: false

# External services configuration
externalServices:
  # Enable external services for development testing
  enabled: true
  
  # LLM service configuration (for NLP features)
  llm:
    provider: "ollama"  # Use in-cluster Ollama for development
    endpoint: "http://{{ include \"kubechat.fullname\" . }}-ollama:11434"
    model: "llama3.2"

# Ollama Configuration - In-cluster LLM service
ollama:
  # Re-enabling Ollama with proper security configuration
  enabled: true
  
  # Number of replicas (1 for development)
  replicas: 1
  
  # Image configuration
  image:
    repository: "ollama/ollama"
    tag: "0.1.26"
    pullPolicy: "IfNotPresent"
  
  # Service configuration
  service:
    type: "ClusterIP"
    port: 11434
  
  # Environment variables
  env:
    # Allow external connections to Ollama
    OLLAMA_HOST: "0.0.0.0"
    # Set Ollama home directory that matches mount path
    OLLAMA_HOME: "/.ollama"
    # Set GPU support if available
    OLLAMA_GPU: "false"
  
  # Resource limits and requests
  resources:
    limits:
      cpu: "2000m"
      memory: "4Gi"
    requests:
      cpu: "500m"
      memory: "2Gi"
  
  # Persistent storage for models
  persistence:
    enabled: true
    size: "20Gi"
    storageClass: ""  # Use default storage class
    accessModes:
      - "ReadWriteOnce"
  
  # Model initialization configuration
  modelInitialization:
    enabled: true
    model: "llama3.2"
    # Additional models to pull on startup
    additionalModels: []
      # - "codellama:7b"
      # - "mistral:7b"
  
  # Health checks
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  # Security context - Following Kubernetes best practices
  securityContext:
    runAsUser: 1000  # Non-root user for security
    runAsGroup: 1000
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL
  
  # Pod security context - Following Kubernetes best practices
  podSecurityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  
  # Node selector, affinity and tolerations
  nodeSelector: {}
  affinity: {}
  tolerations: []

# Development utilities
devUtils:
  # Enable kubectl debug utilities
  debugPod:
    enabled: true
    image: "nicolaka/netshoot:latest"
  
  # Enable database utilities
  dbUtils:
    enabled: true
    image: "postgres:15-alpine"

# Testing configuration
testing:
  # Enable test fixtures
  fixtures:
    enabled: true
    
  # Test data configuration
  testData:
    enabled: true
    generateSample: true